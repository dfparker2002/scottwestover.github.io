<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://scottwestover.github.io/"/>
  <updated>2018-03-26T03:59:18.000Z</updated>
  <id>http://scottwestover.github.io/</id>
  
  <author>
    <name>Scott Westover</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity 2D Snake Tutorial Part 1</title>
    <link href="http://scottwestover.github.io/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/"/>
    <id>http://scottwestover.github.io/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/</id>
    <published>2018-03-26T03:32:18.000Z</published>
    <updated>2018-03-26T03:59:18.000Z</updated>
    
    <content type="html"><![CDATA[<p> For this tutorial we are going to make a simple 2D snake game in Unity. If you are not familiar with the classic arcade game Snake, it is a game that was originally created in the 1970’s, and it gained a lot of popularity when it was included on Nokia phones. The game itself has a few variants.</p><p>For this tutorial, the main objective of the game is to eat as many apples as you can without running into the any of the walls, obstacles, or yourself. As you eat apples, the snake will get longer, and the speed of the game will pick up, forcing the player to react faster, and to have to think strategically.</p><p>In order to follow along with this tutorial, you will need to have Unity installed. For this tutorial we will be using Unity 5.4.1f1, however newer versions of Unity should work just fine. One thing to note is that this is not a tutorial on how to use Unity, so it is best to have some basic understanding of Unity and how it works. However, if you are not familiar with it, you should still be able to follow along with this tutorial.</p><p></p><h4>Game Mechanics</h4><p></p><p>Before we start our project, we will need to plan out how our game will work. We will want to include the following:<br><ul><br>  <li>Player (Snake):<br>    <ul><br>      <li>Starts in the center of the game</li><br>      <li>Is only 1 cell big when the game starts</li><br>      <li>Will move automatically at a certain speed once the game begins</li><br>      <li>Will need to be able to detect player input to change the direction of the snake</li><br>      <li>Will need to be able to detect collisions with the apple, wall, and the tail of the snake.</li><br>      <li>When an apple is eaten, will need to increase the the cells of the snake by 1</li><br>      <li>When the snake collides with a wall or itself, the game will end</li><br>      <li>Will need to keep track of the direction of the snake is heading so it can update the positions of each cell of the snake</li><br>    </ul><br>  </li><br>  <li>Apple:<br>    <ul><br>      <li>Spawns randomly in the game area</li><br>      <li>1 apple needs to spawn at the beginning of the game</li><br>      <li>Need to spawn a new apple when the current one has been eaten</li><br>    </ul><br>  </li><br>  <li>Game Over:<br>    <ul><br>      <li>Will display the Game Over text when the game is over</li><br>      <li>Will need to destroy the snake and apple objects on the screen</li><br>    </ul><br>  </li><br></ul><br></p><p><div>With our basic game mechanics laid out, lets get started.</div></p><p></p><h4>Project Setup</h4><p></p><p>For the first step, we are going to make a new 2D project in Unity. Once Unity has started, click on <b>New Project</b>.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot2.png" title="screen shot 2"><br></p><br><p>Now, we are going to setup the folder structure for our project. In the <b>Project Area</b> under the <b>Assets</b> folder, create four new folders: <b>Prefabs</b>, <b>Scenes</b>, <b>Scripts</b>, and <b>Sprites</b>.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot3.png" title="screen shot 3"><br></p><br><p>Next, we will save our current scene in the new <b>Scenes</b> folder. In the main menu, click on <b>File-&gt;Save Scene As…</b>, and in the dialog that pops up, enter <b>Main</b>, and then click the save button.</p><br><p>With our basic scene now created, we are going to import the two sprites that are used in this tutorial. Right click on the following images, and click <b>Save Image As…</b> on each one.</p><br><p style="text-align: center;">snake.png<br><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/snake.png" title="snake"><br></p><br><p style="text-align: center;">apple.png<br><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/apple.png" title="apple image for our game"><br></p><br><p>In Unity, right click on the <b>Sprites</b> folder, and choose <b>Import New Asset…</b>, you can also drag the two images directly into the folder. Once your images are imported into your project, you will need to update the <b>Pixels Per Unit</b> setting for each image. If you are not familiar with this setting, it is a basic scale that determines how many pixels are equal to one of the units in Unity. In our game, we want each part of the snake, and the apple to be equal to one unit on the screen.</p><br><p>Click on each image in the <b>Sprites</b> folder, and in the inspector, update the <b>PPU (Pixels Per Unit)</b> to <b>15</b>.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot4.png" title="screen shot 4"><br></p><br><p>The last thing we need to do for our basic project setup is update the <b>Size</b> setting of our <b>Main Camera</b>. In the Hierarchy, click on the <b>Main Camera</b>, and in the Inspector, in the Camera settings, update the default <b>Size</b> setting to <b>15</b>.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot5.png" title="screen shot 5"><br></p><p></p><h4>Prefabs and Game Over Text</h4><p></p><p>With our basic project setup completed, we are going to create two prefabs for our game, the apple and the snakeTail. From the <b>Sprites</b> folder, drag the <b>apple</b> sprite into the Hierarchy to create a new Game Object.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot6.png" title="screen shot 6"><br></p><br><p>With the apple Game Object selected, in the inspector make sure the name of the game object is <b>apple</b>, and that the position of the Game Object is (0,0,0). Now, in the inspector, click on the <b>Add Component</b> button, and in the dialog that appears, select the <b>Box Collider 2D</b> component. In the new <b>Box Collider 2D</b> settings in the inspector, click the check box for <b>Is Trigger</b>.</p><br><p>By setting this collider as a trigger, it allows for the object to not behave as a solid object, and instead allows for other colliders to pass through the Game Object. However, we will still be able to detect when another object collides with this game object.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot7.png" title="screen shot 7"><br></p><br><p>Now, drag the <b>apple</b> Game Object from the Hierarchy, into our <b>Prefabs</b> folder in the project view. By doing this, our <b>apple</b> prefab is now created. With the <b>apple</b> prefab created, we can delete our <b>apple</b> Game Object from the Hierarchy. Right click on the apple Game Object, and select <b>Delete</b> from the menu.</p><br><p>Next, we will create our <b>snakeTail</b> prefab. From the <b>Sprites</b> folder, drag the <b>snake</b> sprite into the Hierarchy to create a new Game Object.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot9.png" title="screen shot 9"><br></p><br><p>With the snake, Game Object selected, in the inspector, make sure the name of the game object is <b>snakeTail</b>, and that the position of the Game Object is (0,0,0). Now, in the inspector, click on the <b>Add Component</b> button, and in the dialog that appears, select the <b>Box Collider 2D</b> component. In the new <b>Box Collider 2D</b> settings in the inspector, click the check box for <b>Is Trigger</b>, and update the <b>Size</b> setting to be <b>0.9</b> for both X and Y.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot10.png" title="screen shot 10"><br></p><br><p>The last thing we will need to add to our <b>snakeTail</b> Game Object is a <b>Rigidbody 2D</b> component. In the inspector, click on the <b>Add Component</b> button, and in the dialog that appears, select the <b>Rigidbody 2D</b> component. In the new <b>Rigidbody 2D</b> settings, change the <b>Gravity Scale</b> setting to <b>0</b>, and check the box for <b>Is Kinematic</b>.<br></p><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot11.png" title="screen shot 11"><br></p><br><p>By selecting the <b>Is Kinematic</b> check box, we are telling Unity that all physics should not affect this Game Object, and that the rigidbody will need to be moved by a script.</p><br><p>Now, drag the <b>snakeTail</b> Game Object from the Hierarchy, into our <b>Prefabs</b> folder in the project view. By doing this, our <b>snakeTail</b> prefab is now created. With the <b>snakeTail</b> prefab created, we can delete our <b>snakeTail</b> Game Object from the Hierarchy. Right click on the snakeTail Game Object, and select <b>Delete</b> from the menu.</p><br><p>You should now have two prefabs created under the prefabs folder.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot12.png" title="screen shot 12"><br></p><br><p>With our prefabs created, we will start working on our Game Over text. In the Hierarchy, click on <b>Create-&gt;UI-&gt;Text</b>. Since this is our first UI Text object that has been added to our game, Unity will also add an EventSystem and a Canvas Game Object to our scene. Select the <b>text</b> Game Object, and in the inspector, change the <b>Name</b> of the Game Object to <b>GameOverText</b>, update the <b>Font Size</b> to <b>26</b>, uncheck the <b>Rich Text</b> check box, and update the <b>Alignment</b> to be centered vertically and horizontally.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot13.png" title="screen shot 13"><br></p><br><p>Next, change the <b>Text</b> to <b>Game Over</b>, and update the <b>Color</b> of the text to <b>Black</b>, by clicking on the rectangle that shows the current color. In the modal that appears, you can either click on the color, or enter the RGB value for the color you would like to use.</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot15.png" title="screen shot 15"><br></p><br><p>Your text should look like this:</p><br><p style="text-align: center;"><br>  <img src="/2018/03/25/Unity-2D-Snake-Tutorial-Part-1/screenShot14.png" title="screen shot 14"><br></p><br><p>The last thing we need to do with our <b>Game Over</b> text is hide it, since we only want it to show to the player when the game is actually over. We can do this by changing the <b>Alpha</b> of the text to <b>0</b>. Click on the <b>Color</b> of the text to update it one more time. In the modal that appears, change the value for <b>A</b> (alpha) from 255 to <b>0</b>. This should now hide the text on the screen.<br><br></p><p>With the Game Over text now created, this concludes part 1 of our tutorial. In part 2, we will create our game controller, and start working on the actual game play.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; For this tutorial we are going to make a simple 2D snake game in Unity. If you are not familiar with the classic arcade game Snake, it i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Phaser3 - Create a simple preloader</title>
    <link href="http://scottwestover.github.io/2018/02/14/Phaser3-Create-a-simple-preloader/"/>
    <id>http://scottwestover.github.io/2018/02/14/Phaser3-Create-a-simple-preloader/</id>
    <published>2018-02-14T22:45:42.000Z</published>
    <updated>2018-02-15T00:13:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>With the official release of Phaser 3 this week, and Phaser 2 games not working on Phaser 3, it would be a great time to start using Phaser 3. In this tutorial, I am going to show you how to make a simple preloader in Phaser 3.<br><a id="more"></a></p><p>For this tutorial, we are going to keep things simple, and just put all of our code in our HTML file. To get started, we need to create an <code>index.html</code> file, add the <code>phaser.min.js</code> script, and initialize our Phaser game object. Here is an example of that:</p><script src="https://gist.github.com/scottwestover/d7ab1a8b2643f038c00412960013e83e.js?file=start.html"></script><p>In order to run your game, you will need to host it on a local web server. If you are not sure on how to do this, you can read more about it here: <a href="https://phaser.io/tutorials/getting-started" target="_blank" rel="noopener">https://phaser.io/tutorials/getting-started</a>.</p><p>If you try running your game right now, you should see an empty screen with a black box. However, if you open the console, you should see that Phaser 3 is running.</p><img src="/2018/02/14/Phaser3-Create-a-simple-preloader/1.png" title="empty game"><p>Next, we will load an image into our game. For this tutorial, I am going to use the Phaser logo. You can right click on the image, and choose ‘Save Image As…’, or you can use any image you have. You will need to add this image to the same directory that your index.html file is in.<br><img src="/2018/02/14/Phaser3-Create-a-simple-preloader/logo.png" title="phaser logo image"></p><p>In the <code>preload</code> function, add the following code to load the image:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.load.image(&apos;logo&apos;, &apos;logo.png&apos;);</span><br></pre></td></tr></table></figure></p><p>In the <code>create</code> function, add the following code to add the image to our game:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var logo = this.add.image(400, 300, &apos;logo&apos;);</span><br></pre></td></tr></table></figure></p><p>If you reload the game, you should see your image appear in the game.<br><img src="/2018/02/14/Phaser3-Create-a-simple-preloader/2.png" title="phaser game step 2"></p><p>The image loads pretty quickly, right? Well, if your game has to load a large number assets (images, audio files, fonts, etc), or the user has a slow internet connection, it could take awhile for all your assets to load, and the user would just see a black screen. To simulate this, you can add the following code to the <code>preload</code> function below the image you loaded:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 500; i++) &#123;</span><br><span class="line">  this.load.image(&apos;logo&apos;+i, &apos;assets/logo.png&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>If you reload your game, you should see that it takes a little while for our game image to appear. To show the users that your game is loading, we can add a progress bar. To do this, we are going to create 2 rectangles, one for the progress bar, and one as a boarder to the bar. In the <code>preload</code> function, add the following code at the top of the function:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var progress = this.add.graphics();</span><br><span class="line">var progressBox = this.add.graphics();</span><br><span class="line">progressBox.fillStyle(0x222222, 0.8);</span><br><span class="line">progressBox.fillRect(240, 270, 320, 50);</span><br></pre></td></tr></table></figure></p><p>To update the fill of the progress bar as the assets are loaded, we listen to the <code>progress</code> event. In the <code>preload</code> function, add the following code below the code you just added:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.load.on(&apos;progress&apos;, (value) =&gt; &#123;</span><br><span class="line">  progress.clear();</span><br><span class="line">  progress.fillStyle(0xffffff, 1);</span><br><span class="line">  progress.fillRect(250, 280, 300 * value, 30);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Lastly, we can remove the progress bar from the game by destorying it once everything is loaded. We can do this by listening to the <code>complete</code> event. Add the following code below the code you just added:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.load.on(&apos;complete&apos;, () =&gt; &#123;</span><br><span class="line">  progress.destroy();</span><br><span class="line">  progressBox.destroy();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>If you reload your game, you should see a nice preloader that fills up as assets are loaded.<br><img src="/2018/02/14/Phaser3-Create-a-simple-preloader/3.gif" title="completed preloader"></p><p>You can find the complete code below:</p><script src="https://gist.github.com/scottwestover/d7ab1a8b2643f038c00412960013e83e.js?file=index.html"></script><p>I hope you enjoyed this short tutorial. If you have any questions or comments, please share them below.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With the official release of Phaser 3 this week, and Phaser 2 games not working on Phaser 3, it would be a great time to start using Phaser 3. In this tutorial, I am going to show you how to make a simple preloader in Phaser 3.&lt;br&gt;
    
    </summary>
    
    
      <category term="Game Development, PhaserJS, Tutorial" scheme="http://scottwestover.github.io/tags/Game-Development-PhaserJS-Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Phaser 3 Release</title>
    <link href="http://scottwestover.github.io/2018/02/11/Phaser-3-Release/"/>
    <id>http://scottwestover.github.io/2018/02/11/Phaser-3-Release/</id>
    <published>2018-02-11T06:24:04.000Z</published>
    <updated>2018-02-11T06:46:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>In just a few short days, Phaser 3 will officially be released (Feb. 12th)! If you are not familiar with Phaser, it is a desktop and mobile HTML5 game framework that is written in JavaScript. The framework is easy to use, free, and completely open source.</p><a id="more"></a><p>Phaser 3 has been in continuous development since October 2016, and it has undergone a lot of changes since then. While waiting for the new version to be released, the developers has regularly been releasing beta builds of the framework, so it has been interesting to watch how it has changed. The API has undergone a lot of changes, and everything has been rewritten since version 2.</p><p>You can find lots of examples on the new API here: <a href="http://labs.phaser.io/index.html" target="_blank" rel="noopener">http://labs.phaser.io/index.html</a></p><p>There are a variety of ways on how you can get started using Phaser 3, but my favorite is the webpack template that they made (<a href="https://github.com/photonstorm/phaser3-project-template" target="_blank" rel="noopener">https://github.com/photonstorm/phaser3-project-template</a>). The template will automatically grab the latest version of Phaser, and it has live reload so it is easy to test your game changes as you build it. </p><p>I have been spending more time with the latest beta, and I can’t wait for the official version to come out in just a few days. Once it is released, I am hoping to release some more most posts on it here.</p><p>If you have any comments, please share them below.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In just a few short days, Phaser 3 will officially be released (Feb. 12th)! If you are not familiar with Phaser, it is a desktop and mobile HTML5 game framework that is written in JavaScript. The framework is easy to use, free, and completely open source.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Game Development, PhaserJS" scheme="http://scottwestover.github.io/tags/Game-Development-PhaserJS/"/>
    
  </entry>
  
  <entry>
    <title>Progressive Web App</title>
    <link href="http://scottwestover.github.io/2018/02/10/Progressive-Web-App/"/>
    <id>http://scottwestover.github.io/2018/02/10/Progressive-Web-App/</id>
    <published>2018-02-10T07:58:22.000Z</published>
    <updated>2018-02-11T06:25:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>At the beginning of January, I was accepted into the Grow With Google Scholarship from Udacity. If you are not familar with this program, I really recommend that you check it out. Basically, Google is scholarships for the Nano degrees that are available on Udacity. However, the scholarship is split into two phases.<br><a id="more"></a><br>During the first phase, they admit 10,000 or 15,000 into the first phase (depends on which track you applied for), and you have 3 months to complete the courses that they make available to you. After these 3 months are over, they will offer 1,000 of these applicants a full scholarship for the Nanodegree. You can read more about it here: <a href="https://www.udacity.com/grow-with-google" target="_blank" rel="noopener">https://www.udacity.com/grow-with-google</a></p><p>The first course that I took as part of this program was all about offline first and what a pwa (progressive web app) is. A pwa is a regular website that can appear and behave like a traditional mobile app. When implemented correctly, the pwa will allow users to <code>install</code> or <code>add</code> your website to the home screen of their phone, like it was an app. It can also cache some of the assets of your website, that way if the user tries to visit your site when offline, they will see some content, just like in a mobile app.</p><p>You can read more about pwa here: <a href="https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/</a></p><p>Also, you can learn more about them on Udacity here: <a href="https://www.udacity.com/course/intro-to-progressive-web-apps--ud811" target="_blank" rel="noopener">https://www.udacity.com/course/intro-to-progressive-web-apps--ud811</a></p><p>After taking this course, I was ready to implement what I learned, and I thought it would be great to turn my blog into a pwa. With Hexo, it was actually pretty easy to do. I just needed to create a manifest.json, a precache service worker, and register it. There is an excellent blog post here that details how to do this: <a href="https://alexjoverm.github.io/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/" target="_blank" rel="noopener">https://alexjoverm.github.io/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/</a></p><p>To test the pwa functionality, you can visit the home page of my blog, turn off your internet connection, and then refresh the page. Instead of seeing the normal offline message of your web browser, you should still see some of the content of my blog. Also, if you visit the site on your mobile device, you should get a prompt about adding this site to your home screen!</p><p>If you have any comments, please share them below.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;At the beginning of January, I was accepted into the Grow With Google Scholarship from Udacity. If you are not familar with this program, I really recommend that you check it out. Basically, Google is scholarships for the Nano degrees that are available on Udacity. However, the scholarship is split into two phases.&lt;br&gt;
    
    </summary>
    
    
      <category term="Misc" scheme="http://scottwestover.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>Switching to Hexo</title>
    <link href="http://scottwestover.github.io/2018/02/08/Switching-to-Hexo/"/>
    <id>http://scottwestover.github.io/2018/02/08/Switching-to-Hexo/</id>
    <published>2018-02-09T04:04:32.000Z</published>
    <updated>2018-02-11T06:25:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>It has been awhile since my last post, and with a new year, I figured it was time for a change. I started looking into new ways to blog, and I decided to give Hexo a try.<br><a id="more"></a><br>Also, with the switch to a new platform, I decided to update the look of my blog and went with a simple theme so I could just focus on the blog posts. Originally, I started to update my blog to use Jekyll (awhile ago), and I wanted to try hosting the site on GitHub instead of Blogger. However, I never quite got around to finishing the migration. Hexo seemed very easy to use, and I liked how easy it was to deploy to GitHub, so I figured I would give it a shot. </p><p>Instead of waiting for me to move everything over to Hexo, I decided I would do a fresh launch and start bringing posts over as time allowed. One of my goals for this year is to get this blog back up and running, and to do posts more frequently. I hope you enjoy the new look.</p><p>In case you are looking for any of the old posts, you can find them on Blogger here: <a href="http://scottwestover.blogspot.com/" target="_blank" rel="noopener">http://scottwestover.blogspot.com/</a>.</p><p>If you have any comments, please share them below.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It has been awhile since my last post, and with a new year, I figured it was time for a change. I started looking into new ways to blog, and I decided to give Hexo a try.&lt;br&gt;
    
    </summary>
    
    
      <category term="Misc" scheme="http://scottwestover.github.io/tags/Misc/"/>
    
  </entry>
  
</feed>
