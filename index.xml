<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scott Westover - Blog</title>
    <link>https://scottwestover.github.io/</link>
    <description>Recent content on Scott Westover - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 May 2018 01:24:04 +0000</lastBuildDate>
    
        <atom:link href="https://scottwestover.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Site Updates</title>
      <link>https://scottwestover.github.io/post/2018/07/under-contruction/</link>
      <pubDate>Tue, 15 May 2018 01:24:04 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2018/07/under-contruction/</guid>
      
        <description>&lt;p&gt;After working with the Hugo static site generator, I&amp;rsquo;ve decided that I wanted to move my blog over to this template.&lt;/p&gt;

&lt;p&gt;For the most part, this should be an easy transition since all of the blog files were already Markdown files, but with
the transition, there could be some small issues.&lt;/p&gt;

&lt;p&gt;Hopefully this will be a smooth transition, and I hope you like the new site design!&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Creating A Preloader Screen In Phaser 3 Tutorial</title>
      <link>https://scottwestover.github.io/post/2018/04/creating-a-preloader-screen-in-phaser-3-tutorial/</link>
      <pubDate>Fri, 20 Apr 2018 21:34:18 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2018/04/creating-a-preloader-screen-in-phaser-3-tutorial/</guid>
      
        <description>&lt;p&gt;Recently, I took a Phaser 3 tutorial writer position at Zenva (Game Dev Academy - &lt;a href=&#34;https://gamedevacademy.org/&#34;&gt;https://gamedevacademy.org/&lt;/a&gt;), and now that my first tutorial has been approved and it is finally live, I wanted to share it here.&lt;/p&gt;

&lt;p&gt;For my first tutorial, I decided to expand on the simple preloader tutorial I wrote about in Feburary (here is a link in case you missed it: &lt;a href=&#34;https://scottwestover.github.io/2018/02/14/Phaser3-Create-a-simple-preloader/&#34;&gt;https://scottwestover.github.io/2018/02/14/Phaser3-Create-a-simple-preloader/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;In this tutorial, I show you how to make a simple preloader scene by displaying a progress bar. Then, we enhance the progress bar by adding:
 - some text that shows which file has been loaded
 - display the percentage of the loading bar
 - a simple &amp;lsquo;loading&amp;hellip;&amp;rsquo; message&lt;/p&gt;

&lt;p&gt;You can checkout the tutorial here: &lt;a href=&#34;https://gamedevacademy.org/creating-a-preloading-screen-in-phaser-3/&#34;&gt;https://gamedevacademy.org/creating-a-preloading-screen-in-phaser-3/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://scottwestover.github.io/img/Creating-A-Preloader-Screen-In-Phaser-3-Tutorial/1.png&#34; alt=&#34;Phaser 3 preloader screen tutorial&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Phaser3 - Create a simple preloader</title>
      <link>https://scottwestover.github.io/post/2018/02/phaser3-create-a-simple-preloader/</link>
      <pubDate>Wed, 14 Feb 2018 17:45:42 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2018/02/phaser3-create-a-simple-preloader/</guid>
      
        <description>&lt;p&gt;With the official release of Phaser 3 this week, and Phaser 2 games not working on Phaser 3, it would be a great time to start using Phaser 3. In this tutorial, I am going to show you how to make a simple preloader in Phaser 3.&lt;/p&gt;

&lt;p&gt;For this tutorial, we are going to keep things simple, and just put all of our code in our HTML file. To get started, we need to create an &lt;code&gt;index.html&lt;/code&gt; file, add the &lt;code&gt;phaser.min.js&lt;/code&gt; script, and initialize our Phaser game object. Here is an example of that:
&lt;script src=&#34;https://gist.github.com/scottwestover/d7ab1a8b2643f038c00412960013e83e.js?file=start.html&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;In order to run your game, you will need to host it on a local web server. If you are not sure on how to do this, you can read more about it here: &lt;a href=&#34;https://phaser.io/tutorials/getting-started&#34;&gt;https://phaser.io/tutorials/getting-started&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you try running your game right now, you should see an empty screen with a black box. However, if you open the console, you should see that Phaser 3 is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://scottwestover.github.io/img/Phaser3-Create-a-simple-preloader/1.png&#34; alt=&#34;empty game&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we will load an image into our game. For this tutorial, I am going to use the Phaser logo. You can right click on the image, and choose &amp;lsquo;Save Image As&amp;hellip;&amp;rsquo;, or you can use any image you have. You will need to add this image to the same directory that your index.html file is in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://scottwestover.github.io/img/Phaser3-Create-a-simple-preloader/logo.png&#34; alt=&#34;Phaser logo image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;preload&lt;/code&gt; function, add the following code to load the image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;this.load.image(&amp;#39;logo&amp;#39;, &amp;#39;logo.png&amp;#39;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the &lt;code&gt;create&lt;/code&gt; function, add the following code to add the image to our game:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;var logo = this.add.image(400, 300, &amp;#39;logo&amp;#39;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you reload the game, you should see your image appear in the game.
![Phaser game step 2]](/img/Phaser3-Create-a-simple-preloader/2.png)&lt;/p&gt;

&lt;p&gt;The image loads pretty quickly, right? Well, if your game has to load a large number assets (images, audio files, fonts, etc), or the user has a slow internet connection, it could take awhile for all your assets to load, and the user would just see a black screen. To simulate this, you can add the following code to the &lt;code&gt;preload&lt;/code&gt; function below the image you loaded:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;for (var i = 0; i &amp;lt; 500; i++) {
  this.load.image(&amp;#39;logo&amp;#39;+i, &amp;#39;assets/logo.png&amp;#39;);
}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you reload your game, you should see that it takes a little while for our game image to appear. To show the users that your game is loading, we can add a progress bar. To do this, we are going to create 2 rectangles, one for the progress bar, and one as a boarder to the bar. In the &lt;code&gt;preload&lt;/code&gt; function, add the following code at the top of the function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;var progress = this.add.graphics();
var progressBox = this.add.graphics();
progressBox.fillStyle(0x222222, 0.8);
progressBox.fillRect(240, 270, 320, 50);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To update the fill of the progress bar as the assets are loaded, we listen to the &lt;code&gt;progress&lt;/code&gt; event. In the &lt;code&gt;preload&lt;/code&gt; function, add the following code below the code you just added:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;this.load.on(&amp;#39;progress&amp;#39;, (value) =&amp;gt; {
  progress.clear();
  progress.fillStyle(0xffffff, 1);
  progress.fillRect(250, 280, 300 * value, 30);
});&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lastly, we can remove the progress bar from the game by destorying it once everything is loaded. We can do this by listening to the &lt;code&gt;complete&lt;/code&gt; event. Add the following code below the code you just added:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;this.load.on(&amp;#39;complete&amp;#39;, () =&amp;gt; {
  progress.destroy();
  progressBox.destroy();
});&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you reload your game, you should see a nice preloader that fills up as assets are loaded.
&lt;img src=&#34;https://scottwestover.github.io/img/Phaser3-Create-a-simple-preloader/3.png&#34; alt=&#34;completed preloader&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can find the complete code below:
&lt;script src=&#34;https://gist.github.com/scottwestover/d7ab1a8b2643f038c00412960013e83e.js?file=index.html&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this short tutorial. If you have any questions or comments, please share them below.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Phaser 3 Release</title>
      <link>https://scottwestover.github.io/post/2018/02/phaser-3-release/</link>
      <pubDate>Sun, 11 Feb 2018 01:24:04 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2018/02/phaser-3-release/</guid>
      
        <description>&lt;p&gt;In just a few short days, Phaser 3 will officially be released (Feb. 12th)! If you are not familiar with Phaser, it is a desktop and mobile HTML5 game framework that is written in JavaScript. The framework is easy to use, free, and completely open source.&lt;/p&gt;

&lt;p&gt;Phaser 3 has been in continuous development since October 2016, and it has undergone a lot of changes since then. While waiting for the new version to be released, the developers has regularly been releasing beta builds of the framework, so it has been interesting to watch how it has changed. The API has undergone a lot of changes, and everything has been rewritten since version 2.&lt;/p&gt;

&lt;p&gt;You can find lots of examples on the new API here: &lt;a href=&#34;http://labs.phaser.io/index.html&#34;&gt;http://labs.phaser.io/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a variety of ways on how you can get started using Phaser 3, but my favorite is the webpack template that they made (&lt;a href=&#34;https://github.com/photonstorm/phaser3-project-template&#34;&gt;https://github.com/photonstorm/phaser3-project-template&lt;/a&gt;). The template will automatically grab the latest version of Phaser, and it has live reload so it is easy to test your game changes as you build it.&lt;/p&gt;

&lt;p&gt;I have been spending more time with the latest beta, and I can&amp;rsquo;t wait for the official version to come out in just a few days. Once it is released, I am hoping to release some more most posts on it here.&lt;/p&gt;

&lt;p&gt;If you have any comments, please share them below.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Progressive Web App</title>
      <link>https://scottwestover.github.io/post/2018/02/progressive-web-app/</link>
      <pubDate>Sat, 10 Feb 2018 02:58:22 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2018/02/progressive-web-app/</guid>
      
        <description>&lt;p&gt;At the beginning of January, I was accepted into the Grow With Google Scholarship from Udacity. If you are not familar with this program, I really recommend that you check it out. Basically, Google is scholarships for the Nano degrees that are available on Udacity. However, the scholarship is split into two phases.&lt;/p&gt;

&lt;p&gt;During the first phase, they admit 10,000 or 15,000 into the first phase (depends on which track you applied for), and you have 3 months to complete the courses that they make available to you. After these 3 months are over, they will offer 1,000 of these applicants a full scholarship for the Nanodegree. You can read more about it here: &lt;a href=&#34;https://www.udacity.com/grow-with-google&#34;&gt;https://www.udacity.com/grow-with-google&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first course that I took as part of this program was all about offline first and what a pwa (progressive web app) is. A pwa is a regular website that can appear and behave like a traditional mobile app. When implemented correctly, the pwa will allow users to &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;add&lt;/code&gt; your website to the home screen of their phone, like it was an app. It can also cache some of the assets of your website, that way if the user tries to visit your site when offline, they will see some content, just like in a mobile app.&lt;/p&gt;

&lt;p&gt;You can read more about pwa here: &lt;a href=&#34;https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/&#34;&gt;https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, you can learn more about them on Udacity here: &lt;a href=&#34;https://www.udacity.com/course/intro-to-progressive-web-apps--ud811&#34;&gt;https://www.udacity.com/course/intro-to-progressive-web-apps--ud811&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After taking this course, I was ready to implement what I learned, and I thought it would be great to turn my blog into a pwa. With Hexo, it was actually pretty easy to do. I just needed to create a manifest.json, a precache service worker, and register it. There is an excellent blog post here that details how to do this: &lt;a href=&#34;https://alexjoverm.github.io/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/&#34;&gt;https://alexjoverm.github.io/2017/08/07/How-I-made-a-Progressive-Web-App-out-of-my-Blog/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To test the pwa functionality, you can visit the home page of my blog, turn off your internet connection, and then refresh the page. Instead of seeing the normal offline message of your web browser, you should still see some of the content of my blog. Also, if you visit the site on your mobile device, you should get a prompt about adding this site to your home screen!&lt;/p&gt;

&lt;p&gt;If you have any comments, please share them below.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Switching to Hexo</title>
      <link>https://scottwestover.github.io/post/2018/02/switching-to-hexo/</link>
      <pubDate>Thu, 08 Feb 2018 23:04:32 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2018/02/switching-to-hexo/</guid>
      
        <description>&lt;p&gt;Update: 2018-07-15 - With the new updates to the blog it is no longer a PWA. This is coming soon&amp;hellip;&lt;/p&gt;

&lt;p&gt;It has been awhile since my last post, and with a new year, I figured it was time for a change. I started looking into new ways to blog, and I decided to give Hexo a try.&lt;/p&gt;

&lt;p&gt;Also, with the switch to a new platform, I decided to update the look of my blog and went with a simple theme so I could just focus on the blog posts. Originally, I started to update my blog to use Jekyll (awhile ago), and I wanted to try hosting the site on GitHub instead of Blogger. However, I never quite got around to finishing the migration. Hexo seemed very easy to use, and I liked how easy it was to deploy to GitHub, so I figured I would give it a shot.&lt;/p&gt;

&lt;p&gt;Instead of waiting for me to move everything over to Hexo, I decided I would do a fresh launch and start bringing posts over as time allowed. One of my goals for this year is to get this blog back up and running, and to do posts more frequently. I hope you enjoy the new look.&lt;/p&gt;

&lt;p&gt;In case you are looking for any of the old posts, you can find them on Blogger here: &lt;a href=&#34;http://scottwestover.blogspot.com/&#34;&gt;http://scottwestover.blogspot.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have any comments, please share them below.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Unity 2D Snake Tutorial Part 1</title>
      <link>https://scottwestover.github.io/post/2017/12/unity-2d-snake-tutorial-part-1/</link>
      <pubDate>Fri, 01 Dec 2017 23:32:18 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2017/12/unity-2d-snake-tutorial-part-1/</guid>
      
        <description>&lt;p&gt; For this tutorial we are going to make a simple 2D snake game in Unity. If you are not familiar with the classic arcade game Snake, it is a game that was originally created in the 1970&#39;s, and it gained a lot of popularity when it was included on Nokia phones. The game itself has a few variants.&lt;/p&gt;

&lt;p&gt;For this tutorial, the main objective of the game is to eat as many apples as you can without running into the any of the walls, obstacles, or yourself. As you eat apples, the snake will get longer, and the speed of the game will pick up, forcing the player to react faster, and to have to think strategically.&lt;/p&gt;

&lt;p&gt;In order to follow along with this tutorial, you will need to have Unity installed. For this tutorial we will be using Unity 5.4.1f1, however newer versions of Unity should work just fine. One thing to note is that this is not a tutorial on how to use Unity, so it is best to have some basic understanding of Unity and how it works. However, if you are not familiar with it, you should still be able to follow along with this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;Game Mechanics&lt;/h4&gt;
&lt;p&gt;Before we start our project, we will need to plan out how our game will work. We will want to include the following:
&lt;ul&gt;
  &lt;li&gt;Player (Snake):
    &lt;ul&gt;
      &lt;li&gt;Starts in the center of the game&lt;/li&gt;
      &lt;li&gt;Is only 1 cell big when the game starts&lt;/li&gt;
      &lt;li&gt;Will move automatically at a certain speed once the game begins&lt;/li&gt;
      &lt;li&gt;Will need to be able to detect player input to change the direction of the snake&lt;/li&gt;
      &lt;li&gt;Will need to be able to detect collisions with the apple, wall, and the tail of the snake.&lt;/li&gt;
      &lt;li&gt;When an apple is eaten, will need to increase the the cells of the snake by 1&lt;/li&gt;
      &lt;li&gt;When the snake collides with a wall or itself, the game will end&lt;/li&gt;
      &lt;li&gt;Will need to keep track of the direction of the snake is heading so it can update the positions of each cell of the snake&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Apple:
    &lt;ul&gt;
      &lt;li&gt;Spawns randomly in the game area&lt;/li&gt;
      &lt;li&gt;1 apple needs to spawn at the beginning of the game&lt;/li&gt;
      &lt;li&gt;Need to spawn a new apple when the current one has been eaten&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Game Over:
    &lt;ul&gt;
      &lt;li&gt;Will display the Game Over text when the game is over&lt;/li&gt;
      &lt;li&gt;Will need to destroy the snake and apple objects on the screen&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;With our basic game mechanics laid out, lets get started.&lt;/div&gt;
&lt;h4&gt;Project Setup&lt;/h4&gt;
&lt;p&gt;For the first step, we are going to make a new 2D project in Unity. Once Unity has started, click on &lt;b&gt;New Project&lt;/b&gt;.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot2.png&#34; alt=&#34;screen shot 2&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Now, we are going to setup the folder structure for our project. In the &lt;b&gt;Project Area&lt;/b&gt; under the &lt;b&gt;Assets&lt;/b&gt; folder, create four new folders: &lt;b&gt;Prefabs&lt;/b&gt;, &lt;b&gt;Scenes&lt;/b&gt;, &lt;b&gt;Scripts&lt;/b&gt;, and &lt;b&gt;Sprites&lt;/b&gt;.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot3.png&#34; alt=&#34;screen shot 3&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Next, we will save our current scene in the new &lt;b&gt;Scenes&lt;/b&gt; folder. In the main menu, click on &lt;b&gt;File-&amp;gt;Save Scene As&amp;hellip;&lt;/b&gt;, and in the dialog that pops up, enter &lt;b&gt;Main&lt;/b&gt;, and then click the save button.&lt;/p&gt;
&lt;p&gt;With our basic scene now created, we are going to import the two sprites that are used in this tutorial. Right click on the following images, and click &lt;b&gt;Save Image As&amp;hellip;&lt;/b&gt; on each one.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;snake.png&lt;br&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/snake.png&#34; alt=&#34;snake&#34; /&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;apple.png&lt;br&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/apple.png&#34; alt=&#34;apple image for our game&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;In Unity, right click on the &lt;b&gt;Sprites&lt;/b&gt; folder, and choose &lt;b&gt;Import New Asset&amp;hellip;&lt;/b&gt;, you can also drag the two images directly into the folder. Once your images are imported into your project, you will need to update the &lt;b&gt;Pixels Per Unit&lt;/b&gt; setting for each image. If you are not familiar with this setting, it is a basic scale that determines how many pixels are equal to one of the units in Unity. In our game, we want each part of the snake, and the apple to be equal to one unit on the screen.&lt;/p&gt;
&lt;p&gt;Click on each image in the &lt;b&gt;Sprites&lt;/b&gt; folder, and in the inspector, update the &lt;b&gt;PPU (Pixels Per Unit)&lt;/b&gt; to &lt;b&gt;15&lt;/b&gt;.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot4.png&#34; alt=&#34;screen shot 4&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;The last thing we need to do for our basic project setup is update the &lt;b&gt;Size&lt;/b&gt; setting of our &lt;b&gt;Main Camera&lt;/b&gt;. In the Hierarchy, click on the &lt;b&gt;Main Camera&lt;/b&gt;, and in the Inspector, in the Camera settings, update the default &lt;b&gt;Size&lt;/b&gt; setting to &lt;b&gt;15&lt;/b&gt;.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot5.png&#34; alt=&#34;screen shot 5&#34; /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;Prefabs and Game Over Text&lt;/h4&gt;
&lt;p&gt;With our basic project setup completed, we are going to create two prefabs for our game, the apple and the snakeTail. From the &lt;b&gt;Sprites&lt;/b&gt; folder, drag the &lt;b&gt;apple&lt;/b&gt; sprite into the Hierarchy to create a new Game Object.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot6.png&#34; alt=&#34;screen shot 6&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;With the apple Game Object selected, in the inspector make sure the name of the game object is &lt;b&gt;apple&lt;/b&gt;, and that the position of the Game Object is (0,0,0). Now, in the inspector, click on the &lt;b&gt;Add Component&lt;/b&gt; button, and in the dialog that appears, select the &lt;b&gt;Box Collider 2D&lt;/b&gt; component. In the new &lt;b&gt;Box Collider 2D&lt;/b&gt; settings in the inspector, click the check box for &lt;b&gt;Is Trigger&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;By setting this collider as a trigger, it allows for the object to not behave as a solid object, and instead allows for other colliders to pass through the Game Object. However, we will still be able to detect when another object collides with this game object.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot7.png&#34; alt=&#34;screen shot 7&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Now, drag the &lt;b&gt;apple&lt;/b&gt; Game Object from the Hierarchy, into our &lt;b&gt;Prefabs&lt;/b&gt; folder in the project view. By doing this, our &lt;b&gt;apple&lt;/b&gt; prefab is now created. With the &lt;b&gt;apple&lt;/b&gt; prefab created, we can delete our &lt;b&gt;apple&lt;/b&gt; Game Object from the Hierarchy. Right click on the apple Game Object, and select &lt;b&gt;Delete&lt;/b&gt; from the menu.&lt;/p&gt;
&lt;p&gt;Next, we will create our &lt;b&gt;snakeTail&lt;/b&gt; prefab. From the &lt;b&gt;Sprites&lt;/b&gt; folder, drag the &lt;b&gt;snake&lt;/b&gt; sprite into the Hierarchy to create a new Game Object.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot9.png&#34; alt=&#34;screen shot 9&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;With the snake, Game Object selected, in the inspector, make sure the name of the game object is &lt;b&gt;snakeTail&lt;/b&gt;, and that the position of the Game Object is (0,0,0). Now, in the inspector, click on the &lt;b&gt;Add Component&lt;/b&gt; button, and in the dialog that appears, select the &lt;b&gt;Box Collider 2D&lt;/b&gt; component. In the new &lt;b&gt;Box Collider 2D&lt;/b&gt; settings in the inspector, click the check box for &lt;b&gt;Is Trigger&lt;/b&gt;, and update the &lt;b&gt;Size&lt;/b&gt; setting to be &lt;b&gt;0.9&lt;/b&gt; for both X and Y.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot10.png&#34; alt=&#34;screen shot 10&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;The last thing we will need to add to our &lt;b&gt;snakeTail&lt;/b&gt; Game Object is a &lt;b&gt;Rigidbody 2D&lt;/b&gt; component. In the inspector, click on the &lt;b&gt;Add Component&lt;/b&gt; button, and in the dialog that appears, select the &lt;b&gt;Rigidbody 2D&lt;/b&gt; component. In the new &lt;b&gt;Rigidbody 2D&lt;/b&gt; settings, change the &lt;b&gt;Gravity Scale&lt;/b&gt; setting to &lt;b&gt;0&lt;/b&gt;, and check the box for &lt;b&gt;Is Kinematic&lt;/b&gt;.
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot11.png&#34; alt=&#34;screen shot 11&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;By selecting the &lt;b&gt;Is Kinematic&lt;/b&gt; check box, we are telling Unity that all physics should not affect this Game Object, and that the rigidbody will need to be moved by a script.&lt;/p&gt;
&lt;p&gt;Now, drag the &lt;b&gt;snakeTail&lt;/b&gt; Game Object from the Hierarchy, into our &lt;b&gt;Prefabs&lt;/b&gt; folder in the project view. By doing this, our &lt;b&gt;snakeTail&lt;/b&gt; prefab is now created. With the &lt;b&gt;snakeTail&lt;/b&gt; prefab created, we can delete our &lt;b&gt;snakeTail&lt;/b&gt; Game Object from the Hierarchy. Right click on the snakeTail Game Object, and select &lt;b&gt;Delete&lt;/b&gt; from the menu.&lt;/p&gt;
&lt;p&gt;You should now have two prefabs created under the prefabs folder.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot12.png&#34; alt=&#34;screen shot 12&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;With our prefabs created, we will start working on our Game Over text. In the Hierarchy, click on &lt;b&gt;Create-&amp;gt;UI-&amp;gt;Text&lt;/b&gt;. Since this is our first UI Text object that has been added to our game, Unity will also add an EventSystem and a Canvas Game Object to our scene. Select the &lt;b&gt;text&lt;/b&gt; Game Object, and in the inspector, change the &lt;b&gt;Name&lt;/b&gt; of the Game Object to &lt;b&gt;GameOverText&lt;/b&gt;, update the &lt;b&gt;Font Size&lt;/b&gt; to &lt;b&gt;26&lt;/b&gt;, uncheck the &lt;b&gt;Rich Text&lt;/b&gt; check box, and update the &lt;b&gt;Alignment&lt;/b&gt; to be centered vertically and horizontally.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot13.png&#34; alt=&#34;screen shot 13&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Next, change the &lt;b&gt;Text&lt;/b&gt; to &lt;b&gt;Game Over&lt;/b&gt;, and update the &lt;b&gt;Color&lt;/b&gt; of the text to &lt;b&gt;Black&lt;/b&gt;, by clicking on the rectangle that shows the current color. In the modal that appears, you can either click on the color, or enter the RGB value for the color you would like to use.&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot15.png&#34; alt=&#34;screen shot 15&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;Your text should look like this:&lt;/p&gt;
&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;https://scottwestover.github.io/img/Unity-2D-Snake-Tutorial-Part-1/screenShot14.png&#34; alt=&#34;screen shot 14&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;The last thing we need to do with our &lt;b&gt;Game Over&lt;/b&gt; text is hide it, since we only want it to show to the player when the game is actually over. We can do this by changing the &lt;b&gt;Alpha&lt;/b&gt; of the text to &lt;b&gt;0&lt;/b&gt;. Click on the &lt;b&gt;Color&lt;/b&gt; of the text to update it one more time. In the modal that appears, change the value for &lt;b&gt;A&lt;/b&gt; (alpha) from 255 to &lt;b&gt;0&lt;/b&gt;. This should now hide the text on the screen.&lt;/p&gt;

&lt;p&gt;With the Game Over text now created, this concludes part 1 of our tutorial. In part 2, we will create our game controller, and start working on the actual game play.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://scottwestover.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://scottwestover.github.io/about/</guid>
      
        <description>&lt;p&gt;Comming Soon&amp;hellip;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Unity Live Training Session On December 19th (Making A Flappy Bird Style Game)</title>
      <link>https://scottwestover.github.io/post/2016/12/2016-12-16-unity-live-training-session-on-december/</link>
      <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/12/2016-12-16-unity-live-training-session-on-december/</guid>
      
        <description>&lt;p&gt;Unity will be holding another live training session on December 19th, at 3:00 - 4:00 PM EST. For this live session they will be going over how to make a simple 2D flappy bird style game. During this session, they will be going over the flapping mechanic, spawning random obstacles, and setting up a simple game manager.&lt;/p&gt;

&lt;p&gt;This session will be hosted by Matthew-Schell. If you are interested in learning more or in signing up, you can do so here:&amp;nbsp;&lt;a href=&#34;https://unity3d.com/learn/live-training/session/making-flappy-bird-style-game&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;https://unity3d.com/learn/live-training/session/making-flappy-bird-style-game&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Ludum Dare 37 Game Entry</title>
      <link>https://scottwestover.github.io/post/2016/12/2016-12-15-ludum-dare-37-game-entry/</link>
      <pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/12/2016-12-15-ludum-dare-37-game-entry/</guid>
      
        <description>&lt;p&gt;This past weekend, I got the chance to participate in the Ludum Dare game jam. If you are not familiar with Ludum Dare it is a game jam that has been around for over 12 years.&lt;br /&gt;
&lt;br /&gt;
This time around the theme was &amp;ldquo;One Room&amp;rdquo;, so my teammates and I came up with the idea that you would play as a room in a house, and you would need to fight the rest of rooms to be the best room in the house. The game was going to be a 2D &amp;ldquo;fighting&amp;rdquo; game, but with the combat being very basic.&lt;br /&gt;
&lt;br /&gt;
The game itself was made in Unity, all the audio was original, and most of the art was original this time. If you are interested in seeing our finished project, you can see it here:&amp;nbsp;&lt;a href=&#34;http://scottwestover.github.io/games/RoomWars/&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;http://scottwestover.github.io/games/RoomWars/&#34;&gt;http://scottwestover.github.io/games/RoomWars/&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
You can also view the game on Ludum Dare here:&amp;nbsp;&lt;a href=&#34;http://ludumdare.com/compo/ludum-dare-37/?action=preview&amp;amp;uid=113176&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;http://ludumdare.com/compo/ludum-dare-37/?action=preview&amp;amp;uid=113176&#34;&gt;http://ludumdare.com/compo/ludum-dare-37/?action=preview&amp;amp;uid=113176&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
&lt;a href=&#34;https://1.bp.blogspot.com/-6v2oCPfuD8E/WFMtAl_N6gI/AAAAAAAACsk/nUMoOwaXf98Lp7oOIQ6fAZ6ZNZ_BWpQuwCLcB/s1600/2016-12-15_1852.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;198&#34; src=&#34;https://1.bp.blogspot.com/-6v2oCPfuD8E/WFMtAl_N6gI/AAAAAAAACsk/nUMoOwaXf98Lp7oOIQ6fAZ6ZNZ_BWpQuwCLcB/s320/2016-12-15_1852.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
&lt;a href=&#34;https://2.bp.blogspot.com/-d--AFNk_YHQ/WFMtHjajYZI/AAAAAAAACso/O7n1G0EA6as0K4c8wAqQE11tEBBfMF8tQCLcB/s1600/2016-12-15_1853.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;199&#34; src=&#34;https://2.bp.blogspot.com/-d--AFNk_YHQ/WFMtHjajYZI/AAAAAAAACso/O7n1G0EA6as0K4c8wAqQE11tEBBfMF8tQCLcB/s320/2016-12-15_1853.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
&lt;br /&gt;&lt;/div&gt;
I hope you enjoyed this post. If you have any questions or comments, please feel free to post them below.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Unity Live Training Session On November 14th (Creating A Quiz Game: Session 1)</title>
      <link>https://scottwestover.github.io/post/2016/11/2016-11-12-unity-live-training-session-on-november/</link>
      <pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/11/2016-11-12-unity-live-training-session-on-november/</guid>
      
        <description>&lt;p&gt;Unity will be holding another live training session on November 14th, at 3:00 - 4:00 PM EST. For this live session they will be going over how to make a multiple choice quiz game. During this session, they will be going over the core game loop, the code architecture best practices, and how to make the code easy to maintain and extend.&lt;br /&gt;
&lt;br /&gt;
This session will be hosted by Matthew-Schell. If you are interested in learning more or in signing up, you can do so here:&amp;nbsp;&lt;a href=&#34;https://unity3d.com/learn/live-training/session/creating-quiz-game-session-1&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://unity3d.com/learn/live-training/session/creating-quiz-game-session-1&#34;&gt;https://unity3d.com/learn/live-training/session/creating-quiz-game-session-1&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>How To Connect To The Engagement History API Through Postman</title>
      <link>https://scottwestover.github.io/post/2016/10/2016-10-29-how-to-connect-to-engagement-history/</link>
      <pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/10/2016-10-29-how-to-connect-to-engagement-history/</guid>
      
        <description>&lt;p&gt;I have gotten a lot of request from people on how to connect to the APIs that are available from LivePerson using Postman, so I decided to share how to do this here.&lt;br /&gt;
&lt;br /&gt;
In order to follow along with this tutorial, you will need the API keys that are available for Engagement History API, and you will need access to the Postman App. To get these keys, you can log into the LiveEngage console, and grab them from them from the API tab under data sources, which is on the campaigns tab. If you are not sure on how to setup your keys, you can learn how to do so&amp;nbsp;&lt;a href=&#34;https://s3-eu-west-1.amazonaws.com/ce-sr/CA/API+Guides/Getting+Started+with+LiveEngage+APIs.pdf&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;here&lt;/span&gt;&lt;/a&gt;.&lt;br /&gt;
&lt;br /&gt;
If you do not already have Postman installed, you can learn more about it and install it from here:&amp;nbsp;&lt;a href=&#34;https://www.getpostman.com/&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://www.getpostman.com/&#34;&gt;https://www.getpostman.com/&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
If you would just like to import a template of the query into Postman, you can do so here:&amp;nbsp;&lt;a href=&#34;https://www.getpostman.com/collections/6bd9d4cc64bbee6843f1&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://www.getpostman.com/collections/6bd9d4cc64bbee6843f1&#34;&gt;https://www.getpostman.com/collections/6bd9d4cc64bbee6843f1&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Let&amp;rsquo;s get started.&lt;br /&gt;
&lt;br /&gt;
1) The first thing you need to do is find out what the base URI is for your account. This will be needed to make any API calls. In Postman, make a new GET request with the following URL:&amp;nbsp;&lt;a href=&#34;https://api.liveperson.net/api/account/&#34;&gt;https://api.liveperson.net/api/account/&lt;/a&gt;&lt;span style=&#34;color: red;&#34;&gt;{Your Account Number}&lt;/span&gt;/service/engHistDomain/baseURI.json?version=1.0&lt;br /&gt;
&lt;br /&gt;
You will need to update the &amp;lsquo;&lt;span style=&#34;color: red;&#34;&gt;{Your Account Number}&lt;/span&gt;&amp;rsquo; with just your account number. For example, your updated link should look similar to this:&amp;nbsp;&lt;a href=&#34;https://api.liveperson.net/api/account/56072331/service/engHistDomain/baseURI.json?version=1.0&#34;&gt;https://api.liveperson.net/api/account/56072331/service/engHistDomain/baseURI.json?version=1.0&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
2) Now, click on the Send button and you should get a 200 response with your base URI.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://2.bp.blogspot.com/-V_t46wZTiXk/WBNAag1-gVI/AAAAAAAABfY/4bnXpi5NTjwi9J_pGG0RIz14N_VGRVI0QCLcB/s1600/2016-10-28_0810.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;215&#34; src=&#34;https://2.bp.blogspot.com/-V_t46wZTiXk/WBNAag1-gVI/AAAAAAAABfY/4bnXpi5NTjwi9J_pGG0RIz14N_VGRVI0QCLcB/s400/2016-10-28_0810.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://3.bp.blogspot.com/-F2Qxx9Q31Vk/WBNG0quXT3I/AAAAAAAABgU/tkIj8LdCwTIBgnW7Sp_WfNbD8BAYhI1JACLcB/s1600/2016-10-28_0838.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;96&#34; src=&#34;https://3.bp.blogspot.com/-F2Qxx9Q31Vk/WBNG0quXT3I/AAAAAAAABgU/tkIj8LdCwTIBgnW7Sp_WfNbD8BAYhI1JACLcB/s320/2016-10-28_0838.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  3) In a new tab in Postman, update the request to be a POST request, and add the following URL to the request:&amp;nbsp;https://&lt;span style=&#34;color: red;&#34;&gt;{YOUR BASE URI}&lt;/span&gt;/interaction_history/api/account/&lt;span style=&#34;color: red;&#34;&gt;{YOUR ACCOUNT NUMBER}&lt;/span&gt;/interactions/search?offset=0&amp;amp;limit=10
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  You will need to update the &amp;lsquo;&lt;span style=&#34;color: red;&#34;&gt;{YOUR BASE URI}&lt;/span&gt;&amp;rsquo; and the &amp;lsquo;&lt;span style=&#34;color: red;&#34;&gt;YOUR ACCOUNT NUMBER}&lt;/span&gt;&amp;rsquo; parts of the URL with your LiveEngage account number, and with the base URI that you received in the steps before. For example, your updated link should look similar to this:&amp;nbsp;&lt;a href=&#34;https://va-a.enghist.liveperson.net/interaction_history/api/account/56072331/interactions/search?offset=0&amp;amp;limit=10&#34;&gt;https://va-a.enghist.liveperson.net/interaction_history/api/account/56072331/interactions/search?offset=0&amp;amp;limit=10&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://2.bp.blogspot.com/-01fcuwKlg7E/WBNGfRAUuuI/AAAAAAAABgQ/XXiSTCYvB1MnOvHfNWjTpOwN76LWSAcdQCLcB/s1600/2016-10-28_0836.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;75&#34; src=&#34;https://2.bp.blogspot.com/-01fcuwKlg7E/WBNGfRAUuuI/AAAAAAAABgQ/XXiSTCYvB1MnOvHfNWjTpOwN76LWSAcdQCLcB/s640/2016-10-28_0836.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  4) For the API call to be successful, you will need to add the following to the request: a body, a content type header, and an OAuth 1 header. To add the Body, click on Body, and choose &amp;ldquo;raw&amp;rdquo; as the type. Add the following parameters to the body:&amp;nbsp;{&amp;ldquo;start&amp;rdquo;:{&amp;ldquo;from&amp;rdquo;:1477052344000,&amp;ldquo;to&amp;rdquo;:1477657144000}}
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://4.bp.blogspot.com/-XC-C5SidCXQ/WBNH7USRUgI/AAAAAAAABgc/C90ggHLmnV0Tx9By8RRG8i9Kv5wWdIqUwCLcB/s1600/2016-10-28_0843.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;236&#34; src=&#34;https://4.bp.blogspot.com/-XC-C5SidCXQ/WBNH7USRUgI/AAAAAAAABgc/C90ggHLmnV0Tx9By8RRG8i9Kv5wWdIqUwCLcB/s640/2016-10-28_0843.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  The data that you just added is the timeframe that you would like to query the API for. The time is entered as an epoch timestamp in milliseconds. To quickly get the date that you would like to use in an epoch timestamp format, you can use this website here: &lt;a href=&#34;http://www.epochconverter.com/&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;http://www.epochconverter.com/&#34;&gt;http://www.epochconverter.com/&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;. Note: You may need to update the timeframe for the query to work with your account.
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  5) Next, lets add the Content-Type header to the request. Click on &amp;ldquo;Headers&amp;rdquo; tab, and in the &amp;ldquo;key&amp;rdquo; field type in:&amp;nbsp;Content-Type, and in the &amp;ldquo;value&amp;rdquo; field type in:&amp;nbsp;application/json.
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://4.bp.blogspot.com/-AnQGB-h37Nw/WBNNhCvOmWI/AAAAAAAABg4/LQwwbFerQF8__I8dsUnHcHxmZIQ2HYcngCLcB/s1600/2016-10-28_0906.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;115&#34; src=&#34;https://4.bp.blogspot.com/-AnQGB-h37Nw/WBNNhCvOmWI/AAAAAAAABg4/LQwwbFerQF8__I8dsUnHcHxmZIQ2HYcngCLcB/s400/2016-10-28_0906.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;
  6) Lastly, you just need to add your OAuth 1 header to the API call. Click on &amp;ldquo;Authorization&amp;rdquo; tab, and in the type drop down choose &amp;ldquo;OAuth 1.0&amp;rdquo;. In the fields that appear, you will need to add your API keys from LiveEngage:
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Consumer Key - Your App Key&lt;/li&gt;
  &lt;li&gt;Consumer Secret - Your Secret&lt;/li&gt;
  &lt;li&gt;Token - Your Access Token&lt;/li&gt;
  &lt;li&gt;Token Secret - You Access Token Secret&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
  Also, on the right hand side, make sure the check for &amp;ldquo;Add params to header&amp;rdquo; is checked.
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://1.bp.blogspot.com/-WY3M1El60Aw/WBNPCRXsilI/AAAAAAAABhI/MbtBJyrwS6c9corSLCZDmYKhQyuDEG9MACLcB/s1600/2016-10-28_0910.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;387&#34; src=&#34;https://1.bp.blogspot.com/-WY3M1El60Aw/WBNPCRXsilI/AAAAAAAABhI/MbtBJyrwS6c9corSLCZDmYKhQyuDEG9MACLcB/s640/2016-10-28_0910.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  Once you fill in your keys, click on the &amp;ldquo;Update Request&amp;rdquo; button to update your request.
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  Now, click on the &amp;ldquo;Send&amp;rdquo; button, and you should get a 200 response back with your chat transcripts.
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://1.bp.blogspot.com/-Y2mTiTHayqY/WBNVd6w5wVI/AAAAAAAABh8/fLeSN2afaaUvL04dkQWhHNct0ZaUNUIlgCLcB/s1600/2016-10-28_0923.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;276&#34; src=&#34;https://1.bp.blogspot.com/-Y2mTiTHayqY/WBNVd6w5wVI/AAAAAAAABh8/fLeSN2afaaUvL04dkQWhHNct0ZaUNUIlgCLcB/s640/2016-10-28_0923.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  You can import a template for this query directly into Postman by clicking this link here:&amp;nbsp;&lt;a href=&#34;https://www.getpostman.com/collections/6bd9d4cc64bbee6843f1&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://www.getpostman.com/collections/6bd9d4cc64bbee6843f1&#34;&gt;https://www.getpostman.com/collections/6bd9d4cc64bbee6843f1&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;div&gt;
  Summary: This tutorial showed you how to use Postman to query the Engagement History API that is available from LivePerson.
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  I hope you enjoyed this tutorial. If you have any questions or comments, please feel free to post them below.
&lt;/div&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Ludum Dare 36 Game Entry</title>
      <link>https://scottwestover.github.io/post/2016/09/2016-09-05-ludum-dare-36-game-entry/</link>
      <pubDate>Mon, 05 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/09/2016-09-05-ludum-dare-36-game-entry/</guid>
      
        <description>&lt;p&gt;Last weekend a few friends from work and I decided to enter Ludum Dare. Ludum Dare is one of the longest running game jams that happens every April, August, and December. It has been around for 12 years, and we finally decided to enter this time around.&lt;br /&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  It was a really interesting experience, since you have a strict deadline to make a game, and you do not receive the theme of the game jam until the jam starts. The theme this time around was ancient technology, so we decided to try and make a 2D platformer that was similar to the old load runner games.&lt;br /&gt;
  &lt;br /&gt;
  You play as a caveman, and your objective is to try and steal the other caveman&amp;rsquo;s fire and get it back to your cave. You must dodge the other cavemen, until you are able to make a spear which will allow you to attack them. In the end, the game was only 2 levels long.
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  The game itself was made in Phaser, all audio in the game was original, and most of the art was obtained from opengameart.org. If you are interested in seeing our finished project, you can see it here:&amp;nbsp;&lt;a href=&#34;http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;amp;uid=113176&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;amp;uid=113176&#34;&gt;http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;amp;uid=113176&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  Overall, it was a lot of fun, and it was nice to see this project through to completion. If you are interested in checking out the source code, you can find that on GitHub here:&amp;nbsp;&lt;a href=&#34;https://github.com/scottwestover/Ludum-Dare-36&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://github.com/scottwestover/Ludum-Dare-36&#34;&gt;https://github.com/scottwestover/Ludum-Dare-36&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;
  &lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
    &lt;a href=&#34;https://1.bp.blogspot.com/-Ci3R9W7CpGI/V8z7OTC46lI/AAAAAAAAAgs/ymcXND5cMucBMejldS8PX6cmwx3hBaI2gCLcB/s1600/113176-shot1-1472433402.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;243&#34; src=&#34;https://1.bp.blogspot.com/-Ci3R9W7CpGI/V8z7OTC46lI/AAAAAAAAAgs/ymcXND5cMucBMejldS8PX6cmwx3hBaI2gCLcB/s320/113176-shot1-1472433402.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;br /&gt;
  &lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
    &lt;a href=&#34;https://2.bp.blogspot.com/-V3s12d8NdpE/V8z7OZXCg_I/AAAAAAAAAgo/gOhX7gFS7V070z3p0r8zN6590Fn5bMiGgCLcB/s1600/113176-shot0-1472433402.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;242&#34; src=&#34;https://2.bp.blogspot.com/-V3s12d8NdpE/V8z7OZXCg_I/AAAAAAAAAgo/gOhX7gFS7V070z3p0r8zN6590Fn5bMiGgCLcB/s320/113176-shot0-1472433402.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;br /&gt;
  If you have an interest in game development, and if you have not had the chance to enter into a game jam, I would recommend that you do. It can be quite daunting at first, but it is really rewarding when at the end of the jam, you have something to show. It is a great learning experience since it allows for you to get feedback on your work, and you can see how other people made their games.&lt;br /&gt;
  &lt;br /&gt;
  I hope you enjoyed this post. If you have any questions or comments, please feel free to post them below.
&lt;/div&gt;
Last weekend a few friends from work and I decided to enter Ludum Dare. Ludum Dare is one of the longest running game jams that happens every April, August, and December. It has been around for 12 years, and we finally decided to enter this time around.&lt;br /&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  It was a really interesting experience, since you have a strict deadline to make a game, and you do not receive the theme of the game jam until the jam starts. The theme this time around was ancient technology, so we decided to try and make a 2D platformer that was similar to the old load runner games.&lt;br /&gt;
  &lt;br /&gt;
  You play as a caveman, and your objective is to try and steal the other caveman&amp;rsquo;s fire and get it back to your cave. You must dodge the other cavemen, until you are able to make a spear which will allow you to attack them. In the end, the game was only 2 levels long.
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  The game itself was made in Phaser, all audio in the game was original, and most of the art was obtained from opengameart.org. If you are interested in seeing our finished project, you can see it here:&amp;nbsp;&lt;a href=&#34;http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;amp;uid=113176&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;amp;uid=113176&#34;&gt;http://ludumdare.com/compo/ludum-dare-36/?action=preview&amp;amp;uid=113176&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;br /&gt;
&lt;/div&gt;
&lt;div&gt;
  Overall, it was a lot of fun, and it was nice to see this project through to completion. If you are interested in checking out the source code, you can find that on GitHub here:&amp;nbsp;&lt;a href=&#34;https://github.com/scottwestover/Ludum-Dare-36&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://github.com/scottwestover/Ludum-Dare-36&#34;&gt;https://github.com/scottwestover/Ludum-Dare-36&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;
  &lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
    &lt;a href=&#34;https://1.bp.blogspot.com/-Ci3R9W7CpGI/V8z7OTC46lI/AAAAAAAAAgs/ymcXND5cMucBMejldS8PX6cmwx3hBaI2gCLcB/s1600/113176-shot1-1472433402.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;243&#34; src=&#34;https://1.bp.blogspot.com/-Ci3R9W7CpGI/V8z7OTC46lI/AAAAAAAAAgs/ymcXND5cMucBMejldS8PX6cmwx3hBaI2gCLcB/s320/113176-shot1-1472433402.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;br /&gt;
  &lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
    &lt;a href=&#34;https://2.bp.blogspot.com/-V3s12d8NdpE/V8z7OZXCg_I/AAAAAAAAAgo/gOhX7gFS7V070z3p0r8zN6590Fn5bMiGgCLcB/s1600/113176-shot0-1472433402.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;242&#34; src=&#34;https://2.bp.blogspot.com/-V3s12d8NdpE/V8z7OZXCg_I/AAAAAAAAAgo/gOhX7gFS7V070z3p0r8zN6590Fn5bMiGgCLcB/s320/113176-shot0-1472433402.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;
  &lt;/div&gt;
  &lt;br /&gt;
  If you have an interest in game development, and if you have not had the chance to enter into a game jam, I would recommend that you do. It can be quite daunting at first, but it is really rewarding when at the end of the jam, you have something to show. It is a great learning experience since it allows for you to get feedback on your work, and you can see how other people made their games.&lt;br /&gt;
  &lt;br /&gt;
  I hope you enjoyed this post. If you have any questions or comments, please feel free to post them below.
&lt;/div&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Querying The Engagement History API With Firefox RESTClient</title>
      <link>https://scottwestover.github.io/post/2016/05/2016-05-14-querying-engagement-history-api-with/</link>
      <pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/05/2016-05-14-querying-engagement-history-api-with/</guid>
      
        <description>&lt;p&gt;The Engagement History API is an API that is available from LivePerson, and it allows for you to search, filter, and keep copies of chat transcripts and the related data, such as visitor information, agent information, and much more.&lt;br /&gt;
&lt;br /&gt;
Before writing any code to start querying the API, it can be useful to use a tool that will allow for you to connect to the API in seconds.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
&lt;a href=&#34;https://3.bp.blogspot.com/-VNqijkLrbAE/VvWa1s3DuxI/AAAAAAAAAeY/uOWa3UdJePg4Ho2oE8LcEmkdwgCi4d7hw/s1600/bd91f8f0e02adffb70754133b032b2de-624x205.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://3.bp.blogspot.com/-VNqijkLrbAE/VvWa1s3DuxI/AAAAAAAAAeY/uOWa3UdJePg4Ho2oE8LcEmkdwgCi4d7hw/s1600/bd91f8f0e02adffb70754133b032b2de-624x205.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
This article discusses how you can use the RESTClient query to the Engagement History API. To read the article, click here:&amp;nbsp;&lt;a href=&#34;https://connect.liveperson.com/content/querying-engagement-history-api-firefox-restclient&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://connect.liveperson.com/content/querying-engagement-history-api-firefox-restclient&#34;&gt;https://connect.liveperson.com/content/querying-engagement-history-api-firefox-restclient&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
I hope you enjoyed this post. If you have any questions or comments, please feel free to post them below.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Troubleshooting APIs With A RESTClient</title>
      <link>https://scottwestover.github.io/post/2016/03/2016-03-25-troubleshooting-apis-with-restclient/</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/03/2016-03-25-troubleshooting-apis-with-restclient/</guid>
      
        <description>&lt;p&gt;When it comes time to connect to APIs, I find that it is a lot easier to test them using a REST client before you start writing any code. Using a REST client allows for you to make sure that you are able to connect to it successfully, and it allows for you to try out different parameters of the API.&lt;br /&gt;
&lt;br /&gt;
One of the best tools that I was introduced to is, the Firefox RESTClient Plugin. This plugin is very easy to use, and it allows for you to save your request for quick reference.&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
&lt;a href=&#34;https://3.bp.blogspot.com/-VNqijkLrbAE/VvWa1s3DuxI/AAAAAAAAAeY/uOWa3UdJePg4Ho2oE8LcEmkdwgCi4d7hw/s1600/bd91f8f0e02adffb70754133b032b2de-624x205.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;https://3.bp.blogspot.com/-VNqijkLrbAE/VvWa1s3DuxI/AAAAAAAAAeY/uOWa3UdJePg4Ho2oE8LcEmkdwgCi4d7hw/s1600/bd91f8f0e02adffb70754133b032b2de-624x205.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br /&gt;
&lt;br /&gt;
This article discusses how you can use the RESTClient connect to an API and it goes through the different settings. To read the article, click here:&amp;nbsp;&lt;a href=&#34;https://connect.liveperson.com/content/troubleshooting-apis&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://connect.liveperson.com/content/troubleshooting-apis&#34;&gt;https://connect.liveperson.com/content/troubleshooting-apis&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
I hope you enjoyed this post. If you have any questions or comments, please feel free to post them below.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Update For March</title>
      <link>https://scottwestover.github.io/post/2016/03/2016-03-23-update-for-march/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/03/2016-03-23-update-for-march/</guid>
      
        <description>&lt;p&gt;Hi Everyone,&lt;br /&gt;
&lt;br /&gt;
I know it has been awhile since my last post here, so I just wanted to give everyone a quick update. I haven&amp;rsquo;t had a lot of time to create content rich posts since I have had a few life changes in the past 2 months. I ended up fracturing my ankle mid February, so my daily routine has changed quite a bit, and I had been asked to create blog posts for the new support community at LivePerson, so I have been focusing on creating content there.&lt;br /&gt;
&lt;br /&gt;
I plan to start sharing those post here, and to start making new content for this blog shortly. In the mean time, I appreciate all of the readers that have still been dropping by.&lt;br /&gt;
&lt;br /&gt;
In case you are interested, here is a link to the Experts Blog on the new support community at LivePerson:&amp;nbsp;&lt;a href=&#34;https://connect.liveperson.com/blogs/expert-blog&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://connect.liveperson.com/blogs/expert-blog&#34;&gt;https://connect.liveperson.com/blogs/expert-blog&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
If you have any comments, please share them below.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>LiveEngage - Engagement History API Program To Send Email</title>
      <link>https://scottwestover.github.io/post/2016/02/2016-02-10-liveengage-engagement-history-api/</link>
      <pubDate>Wed, 10 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/02/2016-02-10-liveengage-engagement-history-api/</guid>
      
        <description>&lt;p&gt;Today I wanted to share with you a program I made that will allow you to use the Engagement History API to send out emails for transcripts that have a particular keyword.&lt;br /&gt;
&lt;br /&gt;
The program will use the API to pull all of your chat transcripts for the previous day that contain a certain keyword, and then it will send it to an email address that you specify. The program makes use of the SendGrid API in order to send the emails.&lt;br /&gt;
&lt;br /&gt;
One example use case for this tool is if you wanted to get an email every time someone answered dissatisfied on your post chat survey, you could use that keyword and it will automatically pull those transcripts.&lt;br /&gt;
&lt;br /&gt;
In order to use the program, you will need to have a SendGrid account with an API key enabled on it. SendGrid allows for you to send up to 12,000 emails for free a month, and if you need to send more they offer very cheap plans. You will also need to have the Engagement History API enabled on your LiveEngage account in order to use the program.&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
If you are interested in checking out the program or getting the source code, you can find it on GitHub here:&amp;nbsp;&lt;a href=&#34;https://github.com/scottwestover/LiveEngageExamples/tree/master/APIs/Java-EHAPIProgram&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://github.com/scottwestover/LiveEngageExamples/tree/master/APIs/Java-EHAPIProgram&#34;&gt;https://github.com/scottwestover/LiveEngageExamples/tree/master/APIs/Java-EHAPIProgram&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
I hope you enjoyed this post. If you have any questions or comments, please feel free to post them below.&lt;/div&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>LiveEngage - Use Your Own Custom Chat Button By Using JQuery</title>
      <link>https://scottwestover.github.io/post/2016/01/2016-01-13-liveengage-use-your-own-custom-chat/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/01/2016-01-13-liveengage-use-your-own-custom-chat/</guid>
      
        <description>&lt;p&gt;Update: With the new HTML engagements in LiveEngage, this method is now outdated. It is recommended that you use the supported method listed above.&lt;br /&gt;
&lt;br /&gt;
The purpose of this tutorial is to show you how you can use your own chat buttons with LiveEngage by using JavaScript.&lt;br /&gt;
&lt;br /&gt;
Currently in LiveEngage, you have a limited number of options for creating a chat button in the LiveEngage studio. This can make it hard for the chat button to match the look of your site, especially with all of the things you can do with CSS and JavaScript today.&lt;br /&gt;
&lt;br /&gt;
So, in order to work around this,you will need to create your own chat that you would like to use on your website, and you will need to create a basic embedded chat button in the LiveEngage studio. Don&amp;rsquo;t worry about what the embedded chat button looks like because we are going to use CSS styling to hide the chat button, and then use JavaScript to click the LiveEngage chat button when your button is clicked.&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;
If you have created both buttons, then we can get started.&lt;br /&gt;
&lt;br /&gt;
1. The first thing you will want to do is add the div for your LiveEngage chat button to your site to make sure it works.&lt;br /&gt;
&lt;br /&gt;
2. Now, we are going to wrap this div inside an anchor tag with a class, which is what we are going to use to trigger the click on the chat button. For example, if your LiveEngage div is:&amp;nbsp;&amp;lt;div id=&amp;ldquo;slideout1&amp;rdquo;&amp;gt;&amp;lt;/div&amp;gt;, your code will look like this now:&lt;br /&gt;
&lt;br /&gt;
&amp;lt;a class=&amp;ldquo;live-person-ghost&amp;rdquo;&amp;gt;&amp;lt;div id=&amp;ldquo;slideout1&amp;rdquo;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/a&amp;gt;&lt;br /&gt;
&lt;br /&gt;
3. Next, we are going to add an id to our custom button. By adding an id, it will allow use to check to see if that button was clicked. Here is an example:&lt;br /&gt;
&lt;br /&gt;
&amp;lt;button type=&amp;ldquo;button&amp;rdquo; id=&amp;ldquo;live-engage-link&amp;rdquo;&amp;gt;Instant Live Chat&amp;lt;/button&amp;gt;&lt;br /&gt;
&lt;br /&gt;
4. If you do not have JQuery on your website, you will need to add the following script to the head section of your site:&lt;br /&gt;
&lt;br /&gt;
&amp;lt;script src=&amp;ldquo;&lt;a href=&#34;http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&#34;&gt;http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
4. Now, we are going to add the JavaScript that will allow us to trigger the click on the LiveEngage button when someone clicks on your custom chat button. Add the following code before your closing body tag:&lt;br /&gt;
&lt;br /&gt;
&lt;script src=&#34;https://gist.github.com/scottwestover/1cb9c475979feb87d7c4.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now that you have added the JavaScript, we can test the code to make sure it works. If you click on your custom chat button, and it triggers the LiveEngage chat button, then the last thing we need to do is hide the LiveEngage chat button. You will need to add the following style to your LiveEngage div:&amp;nbsp;style=&amp;ldquo;display:none&amp;rdquo;.&lt;br /&gt;
&lt;br /&gt;
Here is a complete example of the code:&lt;br /&gt;
&lt;br /&gt;
&lt;script src=&#34;https://gist.github.com/scottwestover/bac0091b8752cb96bf65.js&#34;&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div&gt;
Summary: This tutorial showed you how to use JavaScript and CSS to use your own custom chat buttons with LiveEngage.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
I hope you enjoyed this tutorial. If you have any questions or comments, please feel free to post them below.&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Free Code Camp - A Community Where You Can Learn To Code And Help Nonprofits</title>
      <link>https://scottwestover.github.io/post/2016/01/2016-01-11-free-code-camp-community-where-you-can/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/01/2016-01-11-free-code-camp-community-where-you-can/</guid>
      
        <description>&lt;p&gt;Today I wanted to share with everyone a website that I came across and that I have started using:&amp;nbsp;&lt;a href=&#34;http://www.freecodecamp.com/&#34;&gt;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;http://www.freecodecamp.com/&#34;&gt;http://www.freecodecamp.com/&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
Free Code Camp is a community that provides to you hundreds of hours of coding lessons, a way to build your portfolio, and they will put you in touch with non-profit organizations that will allow you to apply your new skills.&lt;br /&gt;
&lt;br /&gt;
Some of the skills you can learn include:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;li&gt;CSS3&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;Git and GitHub&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;React.js&lt;/li&gt;
&lt;li&gt;D3.js&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
The best part of this community, is that it is free, and you can access all of the lessons without having to sign up. However, I do recommend that you join because then you can save your progress, and you will also gain access to their online community that has over 100,000 users, which allows you to network and have people you can talk to about your code.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
With the coding lessons, you are able to select any lesson at any time, which means you can work on the particular skills that you are interested in learning without having to go through all of the lessons in a particular order. However, if you are new to coding, then you can definitely start with the earlier lessons and work your way up to the harder concepts.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
Here is an example of what their map looks like:&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;
&lt;a href=&#34;http://3.bp.blogspot.com/-siN62BgapbE/VpOrR7POJvI/AAAAAAAAAdA/xuX5rcOZnrA/s1600/2016-01-11_0812.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;640&#34; src=&#34;https://3.bp.blogspot.com/-siN62BgapbE/VpOrR7POJvI/AAAAAAAAAdA/xuX5rcOZnrA/s640/2016-01-11_0812.png&#34; width=&#34;368&#34; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;
&lt;div&gt;
So far, I have worked on some of the lessons in my free time over the past few weeks, and I have enjoyed the experience. If you are interested in picking up new skills, I would definitely recommend that you check out this site.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;
I hope you enjoyed this post. If you have any questions or comments, please feel free to post them below.&lt;/div&gt;
&lt;div&gt;
&lt;br /&gt;&lt;/div&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>AEM Gems - Oak Lucene Indexes</title>
      <link>https://scottwestover.github.io/post/2016/01/2016-01-01-aem-gems-oak-lucene-indexes/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://scottwestover.github.io/post/2016/01/2016-01-01-aem-gems-oak-lucene-indexes/</guid>
      
        <description>&lt;p&gt;Adobe will be holding another &amp;ldquo;AEM Gem&amp;rdquo; on January 20th at 11 A.M. - 12:00 P.M. EST.&lt;br /&gt;
&lt;br /&gt;
This session will be a technical deep dive on Oak Lucene Indexes and how they can be used to get your queries perform better. This gem will also provide insight into how asynchronous indexing works and how it can be monitored.&lt;br /&gt;
&lt;br /&gt;
Here is a link to sign up if you are interested:&amp;nbsp;&lt;span style=&#34;color: blue;&#34;&gt;&lt;a href=&#34;https://communities.adobe.com/content/usergenerated/content/cush/en/communities/aem_technologistsdevelopersarchitects/events/_jcr_content/par/calendar/aem_gems_oak_lucene_.form.html/content/cush/en/communities/aem_technologistsdevelopersarchitects/events/upcoming-event-detail&#34; target=&#34;_blank&#34;&gt;Register&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;div&gt;
&lt;br /&gt;
This session will be hosted by Chetan Mehrotra and Alex Parvulescu.&lt;br /&gt;
&lt;br /&gt;
Update: 3/23/2106&lt;br /&gt;
&lt;br /&gt;
Here is a link to the recorded presentation and the slides:&amp;nbsp;&lt;a href=&#34;http://dev.day.com/content/ddc/en/gems/oak-lucene-indexes.html&#34;&gt;http://dev.day.com/content/ddc/en/gems/oak-lucene-indexes.html&lt;/a&gt;&lt;/div&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>